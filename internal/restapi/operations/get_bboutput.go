// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetBboutputHandlerFunc turns a function with the right signature into a get bboutput handler
type GetBboutputHandlerFunc func(GetBboutputParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBboutputHandlerFunc) Handle(params GetBboutputParams) middleware.Responder {
	return fn(params)
}

// GetBboutputHandler interface for that can handle valid get bboutput params
type GetBboutputHandler interface {
	Handle(GetBboutputParams) middleware.Responder
}

// NewGetBboutput creates a new http.Handler for the get bboutput operation
func NewGetBboutput(ctx *middleware.Context, handler GetBboutputHandler) *GetBboutput {
	return &GetBboutput{Context: ctx, Handler: handler}
}

/*GetBboutput swagger:route GET /bboutput getBboutput

TODO

TODO

*/
type GetBboutput struct {
	Context *middleware.Context
	Handler GetBboutputHandler
}

func (o *GetBboutput) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetBboutputParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
